int brainfuck(FILE* input){
	pila_t* pila_pos_linea = pila_crear();
	if(pila_pos_linea == NULL){
		return -1;
	}
	pila_t* pila_pos_vector = pila_crear();
	if(pila_pos_vector == NULL){
		return -1;
	}
	vector_t* vector = vector_crear(LARGO_INICIAL);
	if(vector == NULL){
		return -1;
	}
	char *linea = NULL;
	size_t tam = 0;
	ssize_t caracteres = 1;
	caracteres = getline(&linea,&tam,input);
	int pos_vector = 0;
	int pos_linea = 0;
	int largo_vector = LARGO_INICIAL;
	while(caracteres != - 1){
		while(linea[pos_linea] != '\n'){
			if(linea[pos_linea] == '+'){
				vector->datos[pos_vector] ++;
			}
			else if(linea[pos_linea] == '-'){
				vector->datos[pos_vector] --;
			}
			else if(linea[pos_linea] == '.'){
				printf("El vector en espacio %i es %i\n", pos_vector, vector->datos[pos_vector]);
			}
			else if(linea[pos_linea] == ','){
				vector->datos[pos_vector] = getchar();
			}
			else if(linea[pos_linea] == '>'){
				if(pos_vector == vector->tam){
					if(!vector_redimensionar(vector, vector->tam * 2)){
						return -1;
					}
				}
				pos_vector ++;
			}
			else if(linea[pos_linea] == '<'){
				pos_vector --;
			}
			else if(linea[pos_linea] == '['){
				int pos_siguiente;
				int pos_vector_aux = pos_vector;
				int pos_linea_aux = pos_linea;
				pos_linea ++;
				pila_apilar(pila_pos_vector, &pos_vector_aux);
				pila_apilar(pila_pos_linea, &pos_linea_aux);
				while(!pila_esta_vacia(pila_pos_vector)){
					while(vector->datos[*(int*)pila_ver_tope(pila_pos_vector)] != 0 || linea[pos_linea] == ']'){
						if(linea[pos_linea] == '['){
							pila_apilar(pila_pos_vector, &pos_vector);
							pila_apilar(pila_pos_linea, (&pos_linea) + 1);
						}
						else if(linea[pos_linea] == '+'){
							vector->datos[pos_vector] ++;
						}	
						else if(linea[pos_linea] == '-'){
							vector->datos[pos_vector] --;
						}
						else if(linea[pos_linea] == '.'){
							printf("El vector en espacio %i es %i\n", pos_vector, vector->datos[pos_vector]);
						}
						else if(linea[pos_linea] == ','){
							vector->datos[pos_vector] = getchar();
						}
						else if(linea[pos_linea] == '>'){
							if(pos_vector == vector->tam){
								if(!vector_redimensionar(vector, vector->tam * 2)){
									return -1;
								}
							}
							pos_vector ++;
						}
						else if(linea[pos_linea] == '<'){
							pos_vector --;
						}
						else if(linea[pos_linea] == ']'){
							pos_siguiente = pos_linea;
							pos_linea = pos_linea_aux;
						}
						pos_linea ++;	
					}
					pos_linea = pos_siguiente;
					pila_desapilar(pila_pos_vector);
					pila_desapilar(pila_pos_linea);
				}
			}
			pos_linea ++;
		}
		if(input == stdin){
			for(int i = 0; i < LARGO_INICIAL; i ++){
				printf("%i : %i\n", i, vector->datos[i]);
			}
			return 0;
		}
		else{
			caracteres = getline(&linea,&tam,input);
			pos_linea = 0;
		}
	}
}






int brainfuck(FILE* input){
	char *linea = NULL;
	size_t tam = 0;
	ssize_t caracteres = 1;
	caracteres = getline(&linea,&tam,input);
	int pos_vector = 0;
	int pos_linea = 0;
	int largo_vector = LARGO_INICIAL;
	while(caracteres != - 1){
		pila_t* pila_pos_linea = pila_crear();
		if(pila_pos_linea == NULL){
			return -1;
		}
		vector_t* vector = vector_crear(LARGO_INICIAL);
		if(vector == NULL){
			return -1;
		}
		for(int i = 0;i < vector->tam;i ++){
			vector->datos[i] = 0;
		}
		vector_t* vector_pos = vector_crear(LARGO_INICIAL);
		if(vector_pos == NULL){
			return -1;
		}
		for(int i = 0;i < vector_pos->tam;i ++){
			vector->datos[i] = 0;
		}
		int i = 0;
		while(linea[pos_linea] != '\n'){
			if(linea[pos_linea] == '+'){
				vector->datos[pos_vector] ++;
			}
			else if(linea[pos_linea] == '-'){
				vector->datos[pos_vector] --;
			}
			else if(linea[pos_linea] == '.'){
				printf("%c", vector->datos[pos_vector]);
			}
			else if(linea[pos_linea] == ','){
				vector->datos[pos_vector] = getchar();
			}
			else if(linea[pos_linea] == '>'){
				if(pos_vector == vector->tam){
					if(!vector_redimensionar(vector, vector->tam * 2)){
						return -1;
					}
				}
				pos_vector ++;
			}
			else if(linea[pos_linea] == '<'){
				pos_vector --;
			}
			else if(linea[pos_linea] == '[' && vector->datos[pos_vector] == 0){
				while(linea[pos_linea] != ']'){
					pos_linea ++;
				}
			}
			else if(linea[pos_linea] == '[' && vector->datos[pos_vector] != 0){
				vector_pos->datos[i] = pos_linea;
				pila_apilar(pila_pos_linea, &vector_pos->datos[i]);
				i ++;
			}
			else if(linea[pos_linea] == ']' && vector->datos[pos_vector] != 0){
				pos_linea = *(int*)pila_ver_tope(pila_pos_linea);
			}
			else if(linea[pos_linea] == ']' && vector->datos[pos_vector] == 0){
				pila_desapilar(pila_pos_linea);
				i --;
			}
			pos_linea ++;
		}
		if(input == stdin){
			for(int i = 0; i < LARGO_INICIAL; i ++){
				printf("%i : %i\n", i, vector->datos[i]);
			}
			pila_destruir(pila_pos_linea);
			vector_destruir(vector);
			vector_destruir(vector_pos);
			free(linea);
			return 0;
		}
		else{
			caracteres = getline(&linea,&tam,input);
			pos_linea = 0;
			pila_destruir(pila_pos_linea);
			vector_destruir(vector);
			vector_destruir(vector_pos);
		}
	}
	free(linea);
}
